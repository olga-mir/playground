apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: tornadorepos.platform.tornado-demo.io
  labels:
    provider: github
    service: repository
    version: "v2"
spec:
  compositeTypeRef:
    apiVersion: platform.tornado-demo.io/v1alpha1
    kind: TornadoRepo

  mode: Pipeline
  pipeline:

  # Step 1: Patch and Transform function for basic resource creation
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:

      # Main Repository Resource
      - name: repository
        base:
          apiVersion: repo.github.upbound.io/v1alpha1
          kind: Repository
          metadata:
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              visibility: private
              hasIssues: true
              hasProjects: true
              hasWiki: false
              allowMergeCommit: true
              allowSquashMerge: true
              allowRebaseMerge: true
              deleteBranchOnMerge: true
              autoInit: true
            providerConfigRef:
              name: github-provider-org
        patches:
        # Use serviceName as repository name if name not provided
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.name
          policy:
            fromFieldPath: Optional
        # Patch for external-name to allow adoption of existing repositories
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName # Default to serviceName
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name # Override with spec.name if provided
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.description
          toFieldPath: spec.forProvider.description
        - type: FromCompositeFieldPath
          fromFieldPath: spec.visibility
          toFieldPath: spec.forProvider.visibility
        # Apply settings
        - type: FromCompositeFieldPath
          fromFieldPath: spec.settings.hasIssues
          toFieldPath: spec.forProvider.hasIssues
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.settings.hasWiki
          toFieldPath: spec.forProvider.hasWiki
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.settings.allowMergeCommit
          toFieldPath: spec.forProvider.allowMergeCommit
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.settings.deleteBranchOnMerge
          toFieldPath: spec.forProvider.deleteBranchOnMerge
          policy:
            fromFieldPath: Optional
        # Add labels for team and service
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]
        # Set status fields
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.htmlUrl
          toFieldPath: status.repositoryUrl
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.cloneUrl
          toFieldPath: status.cloneUrl

      # Default Branch Setting
      - name: default-branch
        base:
          apiVersion: repo.github.upbound.io/v1alpha1
          kind: DefaultBranch
          metadata:
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              branch: main
            providerConfigRef:
              name: github-provider-org
        patches:
        # Patch for external-name: repository name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.settings.defaultBranch
          toFieldPath: spec.forProvider.branch
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

      # Repository Rulesets (Modern replacement for BranchProtection)
      - name: repository-rulesets
        base:
          apiVersion: repo.github.upbound.io/v1alpha1
          kind: RepositoryRuleset
          metadata:
            name: "" # Will be patched with deterministic name
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              enforcement: active
              target: branch
              conditions:
                - refName:
                    include: ["refs/heads/main"]
                  # Add other condition objects here if needed, e.g. - repositoryName: { ... }
              rules:
              - requiredStatusChecks:
                  - requiredCheck: []
                    # strictRequiredStatusChecksPolicy: true # Optional boolean
              - pullRequest:
                  - requiredApprovingReviewCount: 2
                    dismissStaleReviewsOnPush: true
                    requireCodeOwnerReview: true
                  # Other potential parameters:
                  # requiredReviewThreadResolution: false
                  # requireLastPushApproval: false
            providerConfigRef:
              name: github-provider-org
        patches:
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.teamName
            - fromFieldPath: spec.serviceName
            strategy: string
            string:
              fmt: "%s-%s-ruleset-main"
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.repositoryRef.name
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-repository"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.repository
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.repository
          policy:
            fromFieldPath: Optional

        # Patch for external-name using spec.serviceName as repo slug part
        # Format: repo_slug:ruleset_name where ruleset_name is teamName-serviceName-protection
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.serviceName # Repo slug part
              - fromFieldPath: spec.teamName
              - fromFieldPath: spec.serviceName
            strategy: string
            string:
              fmt: "%[1]s:%[2]s-%[3]s-protection"
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional # If spec.serviceName or spec.teamName is missing

        # Override external-name using spec.name as repo slug part, if spec.name is provided
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name        # Repo slug part
              - fromFieldPath: spec.teamName
              - fromFieldPath: spec.serviceName
            strategy: string
            string:
              fmt: "%[1]s:%[2]s-%[3]s-protection"
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional # This patch applies only if spec.name (and others) are present
        # Create ruleset name based on service and team
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.teamName
            - fromFieldPath: spec.serviceName
            strategy: string
            string:
              fmt: "%s-%s-protection"
          toFieldPath: spec.forProvider.name
        # Apply custom rulesets if provided
        - type: FromCompositeFieldPath
          fromFieldPath: spec.branchProtection.customRulesets
          toFieldPath: spec.forProvider
          policy:
            fromFieldPath: Optional
        # Add labels
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

  # Step 2: Handle Actions Secrets (if provided)
  - step: actions-secrets
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:

      # Repository Variables
      - name: repository-variables
        base:
          apiVersion: actions.github.upbound.io/v1alpha1
          kind: ActionsVariable
          metadata:
            name: "" # Will be patched with deterministic name
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              variableName: TEAM_NAME #TODO
            providerConfigRef:
              name: github-provider-org
        patches:
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.teamName
            - fromFieldPath: spec.serviceName
            strategy: string
            string:
              fmt: "%s-%s-actions-var-team"
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.repositoryRef.name
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-repository"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: spec.forProvider.value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.repository
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.repository
          policy:
            fromFieldPath: Optional
        # Patch for external-name: repository_name:variable_name
        # This assumes 'spec.variables' is an array and we're targeting the first variable's name.
        # If spec.variables is not an array or has a different structure, this needs adjustment.
        # This also assumes the 'ActionsVariable' resource manages one variable.
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.serviceName # or spec.name
              - fromFieldPath: spec.variables[0].name
            strategy: string
            string:
              fmt: "%s:%s"
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.variables
          toFieldPath: spec.forProvider
          policy:
            fromFieldPath: Optional
        # Add labels
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

  # Step 3: Handle integrations (webhooks, permissions)
  - step: integrations
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:

      # Repository Webhooks
      - name: repository-webhooks
        base:
          apiVersion: repo.github.upbound.io/v1alpha1
          kind: RepositoryWebhook
          metadata:
            name: "repo-webhook-hardcoded-name"
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              configuration:
              - contentType: "json"
                #insecureSsl: false # Ensure this is a string "false" or "true" if uncommented, or a boolean if the CRD expects that.
                url: "https://example.com/default-webhook-url"
              active: true
              events: ["push", "pull_request"]
            providerConfigRef:
              name: github-provider-org
        patches:
        #- type: FromCompositeFieldPath
        #  fromFieldPath: metadata.name
        #  toFieldPath: spec.forProvider.repositoryRef.name
        #  transforms:
        #  - type: string
        #    string:
        #      type: Format
        #      fmt: "%s-repository"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.repository
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.repository
          policy:
            fromFieldPath: Optional
        # Patch for external-name: For webhooks, the external-name is the webhook ID.
        # Adopting an existing webhook by a predictable name is difficult without knowing its ID.
        # We'll set a placeholder or a common identifier if possible, but true adoption might require manual ID input.
        # For simplicity, we'll use repo name + a fixed suffix, acknowledging this might not work for adoption.
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.serviceName # or spec.name
            strategy: string
            string:
              fmt: "%s:default-webhook" # Placeholder, actual adoption needs the ID
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.webhooks
          toFieldPath: spec.forProvider
          policy:
            fromFieldPath: Optional
        # Add labels
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

  # Step 4: Handle team and collaborator access
  - step: access-management
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:

      - name: team-access
        base:
          apiVersion: team.github.upbound.io/v1alpha1
          kind: TeamRepository
          metadata:
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              # one of pull, triage, push, maintain, admin or the name of an existing custom repository role within the organisation
              permission: maintain
            providerConfigRef:
              name: github-provider-org
        patches:

        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.repository
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.repository
          policy:
            fromFieldPath: Optional

        # Patch for external-name: team_slug_or_id:repository_name
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.teamName
              - fromFieldPath: spec.serviceName # or spec.name
            strategy: string
            string:
              fmt: "%s:%s"
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional

        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: spec.forProvider.teamId

        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

      # Repository Collaborators
      - name: repository-collaborators
        base:
          apiVersion: repo.github.upbound.io/v1alpha1
          kind: RepositoryCollaborator
          metadata:
            name: "" # Will be patched with deterministic name
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              username: platform-bot
              permission: push # One of 'pull', 'push', 'maintain', 'triage' or 'admin' or the name of an existing custom repository role
            providerConfigRef:
              name: github-provider-org
        patches:
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.teamName
            - fromFieldPath: spec.serviceName
            strategy: string
            string:
              fmt: "%s-%s-collab-platform-bot"
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.repositoryRef.name
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-repository"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.repository
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.repository
          policy:
            fromFieldPath: Optional
        # Patch for external-name: repository_name:username
        # This assumes 'spec.collaborators' is an array and we're targeting the first collaborator's username.
        # This also assumes the 'RepositoryCollaborator' resource manages one collaborator.
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.serviceName # or spec.name
              - fromFieldPath: spec.collaborators[0].username
            strategy: string
            string:
              fmt: "%s:%s"
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
        # Patch individual fields from the first collaborator in the array
        - type: FromCompositeFieldPath
          fromFieldPath: spec.collaborators[0].username
          toFieldPath: spec.forProvider.username
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.collaborators[0].permission
          toFieldPath: spec.forProvider.permission
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

  # Step 5: Handle compliance files (CODEOWNERS, etc.)
  - step: compliance-files
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:

      # CODEOWNERS File
      - name: codeowners-file
        base:
          apiVersion: repo.github.upbound.io/v1alpha1
          kind: RepositoryFile
          metadata:
            annotations:
              crossplane.io/resource-policy: Orphan
          spec:
            forProvider:
              file: CODEOWNERS.md
              commitMessage: "Add CODEOWNERS file via Crossplane"
              commitAuthor: "Platform Engineering"
              commitEmail: "platform@company.com"
            providerConfigRef:
              name: github-provider-org
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: spec.forProvider.repository
        - type: FromCompositeFieldPath
          fromFieldPath: spec.name
          toFieldPath: spec.forProvider.repository
          policy:
            fromFieldPath: Optional
        # Patch for external-name: repository_slug:file_path:branch_name
        # Assuming default branch is 'main' if not specified elsewhere for this file.
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.serviceName # or spec.name
              - fromFieldPath: spec.settings.defaultBranch # Fallback to 'main' if not set
            strategy: string
            string:
              fmt: "%s:CODEOWNERS.md:%s" # Uses spec.settings.defaultBranch or you can hardcode 'main'
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.compliance.codeowners.content
          toFieldPath: spec.forProvider.content
          policy:
            fromFieldPath: Optional
        # Generate default CODEOWNERS content if not provided
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.teamName
            - fromFieldPath: spec.teamName
            strategy: string
            string:
              fmt: "# Repository owned by %s team\n* @tornado-demo/%s\n"
          toFieldPath: spec.forProvider.content
          policy:
            fromFieldPath: Optional
        - type: FromCompositeFieldPath
          fromFieldPath: spec.teamName
          toFieldPath: metadata.labels["github.platform.io/team"]
        - type: FromCompositeFieldPath
          fromFieldPath: spec.serviceName
          toFieldPath: metadata.labels["github.platform.io/service"]

  # Step 6: Auto-ready function to mark resources as ready
  - step: auto-ready
    functionRef:
      name: function-auto-ready
