apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cloudrun-service
  labels:
    provider: gcp
    service: cloudrun
spec:
  compositeTypeRef:
    apiVersion: platform.tornado-demo.io/v1alpha1
    kind: CloudRunService

  mode: Pipeline
  pipeline:
  - step: resources
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:

      # Cloud Run Service
      - name: cloudrun-service
        base:
          apiVersion: cloudrun.gcp.upbound.io/v1beta2
          kind: V2Service
          spec:
            forProvider:
              template:
                annotations:
                  run.googleapis.com/execution-environment: gen2
                  # https://cloud.google.com/sdk/gcloud/reference/run/deploy#--vpc-egress
                  run.googleapis.com/vpc-access-egress: all-traffic
                  # Direct VPC egress using network-interfaces annotation
                  run.googleapis.com/network-interfaces: '[{"network":"","subnetwork":""}]'
                containers:
                - ports:
                    containerPort: 8080
              traffic:
              - percent: 100
                type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
            providerConfigRef:
              name: gcp-provider
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        # Basic service configuration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.name
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "%s-glxc"
              type: Format
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.location

        # Container image
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.image
          toFieldPath: spec.forProvider.template.containers[0].image

        # Container port
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.containerConfig.port
          toFieldPath: spec.forProvider.template.containers[0].ports.containerPort

        # Resource limits
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.containerConfig.resources.limits.cpu
          toFieldPath: spec.forProvider.template.containers[0].resources.limits.cpu
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.containerConfig.resources.limits.memory
          toFieldPath: spec.forProvider.template.containers[0].resources.limits.memory

        # Environment variables
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.containerConfig.env
          toFieldPath: spec.forProvider.template.containers[0].env

        # Direct VPC Egress configuration using network-interfaces
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.parameters.network
            - fromFieldPath: spec.parameters.subnetName
            strategy: string
            string:
              fmt: '[{"network":"%s","subnetwork":"%s"}]'
          toFieldPath: spec.forProvider.template.annotations["run.googleapis.com/network-interfaces"]

        # Traffic configuration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.traffic.percent
          toFieldPath: spec.forProvider.traffic[0].percent

        # Output service URL
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.uri
          toFieldPath: status.serviceUrl

        # Ready status
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.conditions[?(@.type=='Ready')].status
          toFieldPath: status.ready

      # IAM Policy Binding for allUsers invoker role
      - name: invoker-policy
        base:
          apiVersion: cloudrun.gcp.upbound.io/v1beta2
          kind: ServiceIAMMember
          spec:
            forProvider:
              member: "allUsers"
              role: "roles/run.invoker"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.name
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: "%s-invoker-glxc"
              type: Format
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.location
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.name
          toFieldPath: spec.forProvider.service
          transforms:
          - type: string
            string:
              fmt: "%s-glxc"
              type: Format

        # Conditional creation based on allowUnauthenticated
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.allowUnauthenticated
          toFieldPath: metadata.annotations["crossplane.io/external-create-pending"]
          transforms:
          - type: convert
            convert:
              toType: string
          - type: map
            map:
              "true": "false"
              "false": "true"
