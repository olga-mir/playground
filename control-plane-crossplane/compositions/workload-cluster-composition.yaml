apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: workload-cluster-composition
  labels:
    provider: gcp
    service: workload-cluster
spec:
  compositeTypeRef:
    apiVersion: platform.tornado-demo.io/v1alpha1
    kind: XWorkloadCluster

  mode: Pipeline
  pipeline:
  - step: cluster-infrastructure
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          ---
          # GKE Cluster
          apiVersion: container.gcp-beta.upbound.io/v1beta2
          kind: Cluster
          metadata:
            name: {{ .observed.composite.resource.spec.parameters.clusterName }}
            annotations:
              crossplane.io/external-name: {{ .observed.composite.resource.spec.parameters.clusterName }}
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.parameters.clusterName }}
          spec:
            forProvider:
              network: "projects/{{ .observed.composite.resource.spec.parameters.projectId }}/global/networks/{{ .observed.composite.resource.spec.parameters.vpcName }}"
              subnetwork: "projects/{{ .observed.composite.resource.spec.parameters.projectId }}/regions/{{ .observed.composite.resource.spec.parameters.region }}/subnetworks/{{ .observed.composite.resource.spec.parameters.subnetName }}"
              location: "{{ .observed.composite.resource.spec.parameters.zone }}"
              workloadIdentityConfig:
                workloadPool: "{{ .observed.composite.resource.spec.parameters.projectId }}.svc.id.goog"
              initialNodeCount: 1
              removeDefaultNodePool: true
              gatewayApiConfig:
                channel: CHANNEL_STANDARD
              enableAutopilot: false
              releaseChannel:
                channel: RAPID
            writeConnectionSecretToRef:
              namespace: crossplane-system
              name: {{ .observed.composite.resource.spec.parameters.clusterName }}-kubeconfig
          ---
          # GKE Node Pool
          apiVersion: container.gcp-beta.upbound.io/v1beta2
          kind: NodePool
          metadata:
            name: {{ .observed.composite.resource.spec.parameters.clusterName }}-pool
            annotations:
              crossplane.io/external-name: {{ .observed.composite.resource.spec.parameters.clusterName }}-pool
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.parameters.clusterName }}-pool
          spec:
            forProvider:
              clusterRef:
                name: {{ .observed.composite.resource.spec.parameters.clusterName }}
              maxPodsPerNode: 32
              nodeConfig:
                spot: true
                machineType: {{ .observed.composite.resource.spec.parameters.machineType }}
                diskSizeGb: 50
              autoscaling:
                minNodeCount: {{ .observed.composite.resource.spec.parameters.minNodes }}
                maxNodeCount: {{ .observed.composite.resource.spec.parameters.maxNodes }}
              management:
                autoRepair: true
                autoUpgrade: true

  - step: flux-installation
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          ---
          # Kubernetes ProviderConfig for this workload cluster
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: ProviderConfig
          metadata:
            name: {{ .observed.composite.resource.spec.parameters.clusterName }}-k8s-provider
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.parameters.clusterName }}-k8s-provider
          spec:
            credentials:
              source: Secret
              secretRef:
                namespace: crossplane-system
                name: {{ .observed.composite.resource.spec.parameters.clusterName }}-kubeconfig
                key: kubeconfig
          ---
          # Helm ProviderConfig for this workload cluster
          apiVersion: helm.crossplane.io/v1beta1
          kind: ProviderConfig
          metadata:
            name: {{ .observed.composite.resource.spec.parameters.clusterName }}-helm-provider
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.parameters.clusterName }}-helm-provider
          spec:
            credentials:
              source: Secret
              secretRef:
                namespace: crossplane-system
                name: {{ .observed.composite.resource.spec.parameters.clusterName }}-kubeconfig
                key: kubeconfig
          ---
          # Flux Installation on Workload Cluster
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            name: {{ .observed.composite.resource.spec.parameters.clusterName }}-flux
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.parameters.clusterName }}-flux
          spec:
            providerConfigRef:
              name: {{ .observed.composite.resource.spec.parameters.clusterName }}-helm-provider
            forProvider:
              namespace: flux-system
              chart:
                name: flux2
                repository: https://fluxcd-community.github.io/helm-charts
                version: "2.12.4"
              values:
                installCRDs: true
                helmController:
                  create: true
                imageAutomationController:
                  create: true
                imageReflectionController:
                  create: true
                kustomizeController:
                  create: true
                notificationController:
                  create: true
                sourceController:
                  create: true

  - step: ready
    functionRef:
      name: function-auto-ready