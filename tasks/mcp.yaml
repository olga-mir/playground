version: "3"

env:
  # These variables must be set in your shell environment before running tasks.
  # Example:
  # export ARGOCD_STD_HOSTNAME="argocd.gcp.yourdomain.com"
  # export ARGOCD_MCP_HOSTNAME="argo-mcp.gcp.yourdomain.com"
  # The tasks will fail if these are not set.
  ARGOCD_STD_HOSTNAME:
    sh: |
      if [ -z "$ARGOCD_STD_HOSTNAME" ]; then
        echo "Error: Environment variable ARGOCD_STD_HOSTNAME is not set." >&2
        exit 1
      fi
      echo "$ARGOCD_STD_HOSTNAME"
  ARGOCD_MCP_HOSTNAME:
    sh: |
      if [ -z "$ARGOCD_MCP_HOSTNAME" ]; then
        echo "Error: Environment variable ARGOCD_MCP_HOSTNAME is not set." >&2
        exit 1
      fi
      echo "$ARGOCD_MCP_HOSTNAME"

  # Absolute path to Claude config mcp file
  CLAUDE_MCP_CONFIG_FILE:
    sh: |
      if [ -z "$CLAUDE_MCP_CONFIG_FILE" ]; then
        echo "Error: Environment variable CLAUDE_MCP_CONFIG_FILE is not set." >&2
        echo "Please provide absolute path to Claude MCP config file" >&2
        exit 1
      fi
      echo "$CLAUDE_MCP_CONFIG_FILE"

tasks:
  generate-configs-standard:
    desc: "Generate MCP client configs using standard Gateway"
    vars:
      ARGOCD_SERVER_URL: "https://$ARGOCD_STD_HOSTNAME"
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    deps:
      - mcp:argocd-env-file
    cmds:
      - |
        # Create VSCode config
        mkdir -p .vscode
        cat > .vscode/mcp.json << EOF
        {
          "servers": {
            "argocd-mcp": {
              "type": "stdio",
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}",
                "ARGOCD_API_TOKEN": "{{.TOKEN}}"
              }
            }
          }
        }
        EOF

        # Create Claude Desktop config
        cat > claude_desktop_config.json << EOF
        {
          "mcpServers": {
            "argocd-mcp": {
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}",
                "ARGOCD_API_TOKEN": "{{.TOKEN}}"
              }
            }
          }
        }
        EOF

        echo "✅ Generated MCP client configurations (Standard Gateway):"
        echo "   - .vscode/mcp.json"
        echo "   - claude_desktop_config.json"

  generate-configs-mcp-not-ready:
    desc: "Generate MCP client configs using kgateway MCP endpoint"
    # however the MCP server urls will need to change to hosted URLs not stdio
    vars:
      ARGOCD_SERVER_URL: "https://$ARGOCD_MCP_HOSTNAME" # This is correct for MCP endpoint
      # Fetch token specifically for the MCP endpoint
      TOKEN:
        sh: |
          echo "Fetching token for MCP endpoint: {{.ARGOCD_SERVER_URL}}" >&2
          MCP_PASSWORD=$(task argocd:get-secret)
          curl -k -s "{{.ARGOCD_SERVER_URL}}/api/v1/session" \
            -d "{\"username\":\"admin\",\"password\":\"$MCP_PASSWORD\"}" \
            -H "Content-Type: application/json" | \
            jq -r '.token' 2>/dev/null || echo "mcp-token-fetch-failed"
    cmds:
      - |
        # Create VSCode config
        mkdir -p .vscode
        cat > .vscode/mcp-kgateway.json << EOF
        {
          "servers": {
            "argocd-mcp": {
              "type": "stdio",
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}", # Use the MCP server URL
                "ARGOCD_API_TOKEN": "{{.TOKEN}}"
              }
            }
          }
        }
        EOF

        # Create Claude Desktop config
        cat > claude_desktop_config_mcp.json << EOF
        {
          "mcpServers": {
            "argocd-mcp": {
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}", # Use the MCP server URL
                "ARGOCD_API_TOKEN": "{{.TOKEN}}"
              }
            }
          }
        }
        EOF

        echo "✅ Generated MCP client configurations (kgateway MCP):"
        echo "   - .vscode/mcp-kgateway.json"
        echo "   - claude_desktop_config_mcp.json"

  update-claude-config-token:
    desc: "Update ARGOCD_API_TOKEN in the Claude config file specified by CLAUDE_MCP_CONFIG_FILE."
    vars:
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - |
        # Expand tilde for CLAUDE_MCP_CONFIG_FILE
        CLAUDE_MCP_CONFIG_FILE=$(eval echo "$CLAUDE_MCP_CONFIG_FILE")

        if [ ! -f "$CLAUDE_MCP_CONFIG_FILE" ]; then
          echo "Error: Config file not found at CLAUDE_MCP_CONFIG_FILE: $CLAUDE_MCP_CONFIG_FILE" >&2
          exit 1
        fi

        echo "Updating token in $CLAUDE_MCP_CONFIG_FILE..."
        # Create timestamped backup
        BACKUP_FILE="${CLAUDE_MCP_CONFIG_FILE}.$(date +%Y%m%d%H%M%S).bak"
        cp "$CLAUDE_MCP_CONFIG_FILE" "$BACKUP_FILE"
        echo "Created backup: $BACKUP_FILE"

        # Escape the new token for sed (handles \, /, &, |)
        ESCAPED_NEW_TOKEN=$(printf '%s\n' "{{.ARGOCD_TOKEN}}" | sed -e 's/\\/\\\\/g' -e 's/\//\\\//g' -e 's/&/\\\&/g' -e 's/|/\\\|/g')

        # Use sed to replace the token. Using temp file for safer in-place edit.
        TMP_SED_FILE=$(mktemp)
        sed "s|\(\"ARGOCD_API_TOKEN\":[[:space:]]*\"\)[^\"]*\"|\1${ESCAPED_NEW_TOKEN}\"|" "$CLAUDE_MCP_CONFIG_FILE" > "$TMP_SED_FILE" && mv "$TMP_SED_FILE" "$CLAUDE_MCP_CONFIG_FILE"

        # Basic verification (grep might be unreliable if token has special characters)
        echo "Token update attempt complete. Please verify the content of $CLAUDE_MCP_CONFIG_FILE."
        echo "The new token starts with: $(echo {{.ARGOCD_TOKEN}} | cut -c 1-10)..."

  test-gateways:
    desc: "Test both ArgoCD Gateway endpoints"
    vars:
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret
    cmds:
      - |
        echo "Testing both ArgoCD Gateway endpoints..."

        # Test Standard Gateway
        echo "1. Testing Standard Gateway (https://$ARGOCD_STD_HOSTNAME):"
        TOKEN1=$(curl -k -s "https://$ARGOCD_STD_HOSTNAME/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token' 2>/dev/null)

        if [ "$TOKEN1" != "null" ] && [ -n "$TOKEN1" ]; then
          echo "   ✅ Standard Gateway authentication successful"
          APPS1=$(curl -k -s "https://$ARGOCD_STD_HOSTNAME/api/v1/applications" \
            -H "Authorization: Bearer $TOKEN1" | jq '.items | length' 2>/dev/null)
          echo "   ✅ Found $APPS1 application(s) via Standard Gateway"
        else
          echo "   ❌ Standard Gateway authentication failed"
        fi

        echo ""

        # Test kgateway MCP
        echo "2. Testing kgateway MCP (https://$ARGOCD_MCP_HOSTNAME):"
        TOKEN2=$(curl -k -s "https://$ARGOCD_MCP_HOSTNAME/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token' 2>/dev/null)

        if [ "$TOKEN2" != "null" ] && [ -n "$TOKEN2" ]; then
          echo "   ✅ kgateway MCP authentication successful"
          APPS2=$(curl -k -s "https://$ARGOCD_MCP_HOSTNAME/api/v1/applications" \
            -H "Authorization: Bearer $TOKEN2" | jq '.items | length' 2>/dev/null)
          echo "   ✅ Found $APPS2 application(s) via kgateway MCP"
        else
          echo "   ❌ kgateway MCP authentication failed"
        fi
