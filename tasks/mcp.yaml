version: "3"

env:
  # These variables must be set in your shell environment before running tasks.
  # Example:
  # export ARGOCD_STD_HOSTNAME="argocd.gcp.yourdomain.com"
  # export ARGOCD_MCP_HOSTNAME="argo-mcp.gcp.yourdomain.com"
  # The tasks will fail if these are not set.
  ARGOCD_STD_HOSTNAME:
    sh: |
      if [ -z "$ARGOCD_STD_HOSTNAME" ]; then
        echo "Error: Environment variable ARGOCD_STD_HOSTNAME is not set." >&2
        echo "Please set it to your ArgoCD standard UI hostname, e.g., export ARGOCD_STD_HOSTNAME=\"argocd.gcp.example.com\"" >&2
        exit 1
      fi
      echo "$ARGOCD_STD_HOSTNAME"
  ARGOCD_MCP_HOSTNAME:
    sh: |
      if [ -z "$ARGOCD_MCP_HOSTNAME" ]; then
        echo "Error: Environment variable ARGOCD_MCP_HOSTNAME is not set." >&2
        echo "Please set it to your ArgoCD MCP UI hostname, e.g., export ARGOCD_MCP_HOSTNAME=\"argo-mcp.gcp.example.com\"" >&2
        exit 1
      fi
      echo "$ARGOCD_MCP_HOSTNAME"

tasks:
  list-configs:
    desc: "List all available MCP server configurations"
    cmds:
      - |
        echo "Available MCP Server Configurations:"
        echo "==================================="
        echo ""
        echo "ArgoCD MCP Server (Standard Gateway):"
        echo "  task mcp:argocd-config-standard     - Show config for standard gateway (URL: https://$ARGOCD_STD_HOSTNAME/)"
        echo "  task mcp:generate-configs-standard  - Generate MCP client configs for standard gateway"
        echo "  üìç Hostname: $ARGOCD_STD_HOSTNAME"
        echo ""
        echo "ArgoCD MCP Server (kgateway MCP):"
        echo "  task mcp:argocd-config-mcp          - Show config for kgateway MCP (URL: https://$ARGOCD_MCP_HOSTNAME/)"
        echo "  task mcp:generate-configs-mcp       - Generate MCP client configs for kgateway MCP"
        echo "  üìç Hostname: $ARGOCD_MCP_HOSTNAME"
        echo ""
        echo "Testing:"
        echo "  task mcp:test-both-gateways         - Test both gateway endpoints"
        echo ""
        echo "GitHub MCP Server:"
        echo "  task mcp:github-config              - Show GitHub config template"
        echo "  task mcp:github-env-file            - Create .env.github template"
        echo ""
        echo "Generated files in current directory:"
        if [ -f .env.argocd ]; then
          echo "  ‚úì .env.argocd (standard gateway)"
        else
          echo "  ‚úó .env.argocd not found"
        fi
        if [ -f .env.argocd-mcp ]; then
          echo "  ‚úì .env.argocd-mcp (kgateway MCP)"
        else
          echo "  ‚úó .env.argocd-mcp not found"
        fi
        if [ -f .env.github ]; then
          echo "  ‚úì .env.github"
        else
          echo "  ‚úó .env.github not found"
        fi
        echo ""
        echo "VSCode configs:"
        if [ -f .vscode/mcp.json ]; then
          echo "  ‚úì .vscode/mcp.json (standard gateway)"
        else
          echo "  ‚úó .vscode/mcp.json not found"
        fi
        if [ -f .vscode/mcp-kgateway.json ]; then
          echo "  ‚úì .vscode/mcp-kgateway.json (kgateway MCP)"
        else
          echo "  ‚úó .vscode/mcp-kgateway.json not found"
        fi
        echo ""
        echo "Note: Ensure ARGOCD_STD_HOSTNAME and ARGOCD_MCP_HOSTNAME are set in your environment."

  argocd-config:
    desc: "Get ArgoCD MCP server configuration"
    vars:
      ARGOCD_SERVER:
        sh: task argocd:get-server-auto
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - |
        echo "ArgoCD MCP Server Configuration:"
        echo "================================"
        echo "Server URL: {{.ARGOCD_SERVER}}"
        echo "API Token: {{.ARGOCD_TOKEN}}"
        echo ""
        echo "Environment variables for MCP server:"
        echo "ARGOCD_SERVER={{.ARGOCD_SERVER}}"
        echo "ARGOCD_TOKEN={{.ARGOCD_TOKEN}}"

  argocd-config-local:
    desc: "Get ArgoCD config for local port-forwarded access"
    vars:
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret
    cmds:
      - |
        echo "Starting port-forward in background..."
        kubectl -n argocd port-forward svc/argocd-server 8080:443 &
        PF_PID=$!
        sleep 3

        echo "Getting token..."
        TOKEN=$(curl -k -s "https://localhost:8080/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token')

        echo "ArgoCD MCP Server Configuration (Local):"
        echo "========================================"
        echo "Server URL: https://localhost:8080"
        echo "API Token: $TOKEN"
        echo ""
        echo "Environment variables for MCP server:"
        echo "ARGOCD_SERVER=https://localhost:8080"
        echo "ARGOCD_TOKEN=$TOKEN"

        kill $PF_PID 2>/dev/null || true

  argocd-env-file:
    desc: "Create .env file for ArgoCD MCP server"
    vars:
      ARGOCD_SERVER:
        sh: task argocd:get-server-internal
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - |
        cat > .env.argocd << EOF
        ARGOCD_SERVER={{.ARGOCD_SERVER}}
        ARGOCD_TOKEN={{.ARGOCD_TOKEN}}
        ARGOCD_INSECURE=true
        EOF
        echo "Created .env.argocd file with ArgoCD configuration"

  argocd-config-standard:
    desc: "Get ArgoCD MCP config using standard Gateway URL"
    vars:
      ARGOCD_SERVER_URL: "https://$ARGOCD_STD_HOSTNAME"
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret-simple
    cmds:
      - |
        echo "Getting ArgoCD token from Standard Gateway..."
        TOKEN=$(curl -k -s "{{.ARGOCD_SERVER}}/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | jq -r '.token' 2>/dev/null || echo "Failed to get token")

        echo "ArgoCD MCP Server Configuration (Standard Gateway - https://$ARGOCD_STD_HOSTNAME):"
        echo "======================================================================"
        echo "Server URL: {{.ARGOCD_SERVER_URL}}"
        echo "API Token: $TOKEN"
        echo ""
        echo "Environment variables for MCP client:"
        echo "ARGOCD_BASE_URL={{.ARGOCD_SERVER_URL}}"
        echo "ARGOCD_API_TOKEN=$TOKEN"

  argocd-config-mcp:
    desc: "Get ArgoCD MCP config using kgateway MCP URL"
    vars:
      ARGOCD_SERVER_URL: "https://$ARGOCD_MCP_HOSTNAME"
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret-simple
    cmds:
      - |
        echo "Getting ArgoCD token from kgateway MCP..."
        TOKEN=$(curl -k -s "{{.ARGOCD_SERVER_URL}}/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | jq -r '.token' 2>/dev/null || echo "Failed to get token")

        echo "ArgoCD MCP Server Configuration (kgateway MCP - https://$ARGOCD_MCP_HOSTNAME):"
        echo "==================================================================="
        echo "Server URL: {{.ARGOCD_SERVER_URL}}"
        echo "API Token: $TOKEN"
        echo ""
        echo "Environment variables for MCP client:"
        echo "ARGOCD_BASE_URL={{.ARGOCD_SERVER_URL}}"
        echo "ARGOCD_API_TOKEN=$TOKEN"

  generate-configs-standard:
    desc: "Generate MCP client configs using standard Gateway"
    vars:
      ARGOCD_SERVER_URL: "https://$ARGOCD_STD_HOSTNAME"
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret-simple
    cmds:
      - |
        echo "Generating MCP client configurations for Standard Gateway (https://$ARGOCD_STD_HOSTNAME)..."
        TOKEN=$(curl -k -s "{{.ARGOCD_SERVER_URL}}/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token' 2>/dev/null || echo "Failed to get token")

        if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
          echo "‚ùå Failed to get ArgoCD token from {{.ARGOCD_SERVER_URL}}"
          echo "   Check if Gateway is accessible and ArgoCD is running."
          exit 1
        fi

        # Create .env file
        cat > .env.argocd << EOF
        ARGOCD_SERVER={{.ARGOCD_SERVER}}
        ARGOCD_TOKEN=$TOKEN
        ARGOCD_INSECURE=false
        EOF

        # Create VSCode config
        mkdir -p .vscode
        cat > .vscode/mcp.json << EOF
        {
          "servers": {
            "argocd-mcp": {
              "type": "stdio",
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}",
                "ARGOCD_API_TOKEN": "$TOKEN"
              }
            }
          }
        }
        EOF

        # Create Claude Desktop config
        cat > claude_desktop_config.json << EOF
        {
          "mcpServers": {
            "argocd-mcp": {
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}",
                "ARGOCD_API_TOKEN": "$TOKEN"
              }
            }
          }
        }
        EOF

        echo "‚úÖ Generated MCP client configurations (Standard Gateway):"
        echo "   - .env.argocd"
        echo "   - .vscode/mcp.json"
        echo "   - claude_desktop_config.json"

  generate-configs-mcp:
    desc: "Generate MCP client configs using kgateway MCP endpoint"
    vars:
      ARGOCD_SERVER_URL: "https://$ARGOCD_MCP_HOSTNAME"
      ARGOCD_PASSWORD:
        sh: task argocD:get-secret-simple
    cmds:
      - |
        echo "Generating MCP client configurations for kgateway MCP (https://$ARGOCD_MCP_HOSTNAME)..."
        TOKEN=$(curl -k -s "{{.ARGOCD_SERVER_URL}}/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | jq -r '.token' 2>/dev/null)

        if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
          echo "‚ùå Failed to get ArgoCD token from {{.ARGOCD_SERVER_URL}}"
          echo "   Check if kgateway MCP is accessible and ArgoCD is running."
          exit 1
        fi

        # Create .env file
        cat > .env.argocd-mcp << EOF
        ARGOCD_SERVER={{.ARGOCD_SERVER}}
        ARGOCD_TOKEN=$TOKEN
        ARGOCD_INSECURE=false
        EOF

        # Create VSCode config
        mkdir -p .vscode
        cat > .vscode/mcp-kgateway.json << EOF
        {
          "servers": {
            "argocd-mcp-kgateway": {
              "type": "stdio",
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}",
                "ARGOCD_API_TOKEN": "$TOKEN"
              }
            }
          }
        }
        EOF

        # Create Claude Desktop config
        cat > claude_desktop_config_mcp.json << EOF
        {
          "mcpServers": {
            "argocd-mcp-kgateway": {
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER_URL}}",
                "ARGOCD_API_TOKEN": "$TOKEN"
              }
            }
          }
        }
        EOF

        echo "‚úÖ Generated MCP client configurations (kgateway MCP):"
        echo "   - .env.argocd-mcp"
        echo "   - .vscode/mcp-kgateway.json"
        echo "   - claude_desktop_config_mcp.json"

  test-both-gateways:
    desc: "Test both ArgoCD Gateway endpoints"
    vars:
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret-simple
    cmds:
      - |
        echo "Testing both ArgoCD Gateway endpoints..."

        # Test Standard Gateway
        echo "1. Testing Standard Gateway (https://$ARGOCD_STD_HOSTNAME):"
        TOKEN1=$(curl -k -s "https://$ARGOCD_STD_HOSTNAME/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token' 2>/dev/null)

        if [ "$TOKEN1" != "null" ] && [ -n "$TOKEN1" ]; then
          echo "   ‚úÖ Standard Gateway authentication successful"
          APPS1=$(curl -k -s "https://$ARGOCD_STD_HOSTNAME/api/v1/applications" \
            -H "Authorization: Bearer $TOKEN1" | jq '.items | length' 2>/dev/null)
          echo "   ‚úÖ Found $APPS1 application(s) via Standard Gateway"
        else
          echo "   ‚ùå Standard Gateway authentication failed"
        fi

        echo ""

        # Test kgateway MCP
        echo "2. Testing kgateway MCP (https://$ARGOCD_MCP_HOSTNAME):"
        TOKEN2=$(curl -k -s "https://$ARGOCD_MCP_HOSTNAME/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token' 2>/dev/null)

        if [ "$TOKEN2" != "null" ] && [ -n "$TOKEN2" ]; then
          echo "   ‚úÖ kgateway MCP authentication successful"
          APPS2=$(curl -k -s "https://$ARGOCD_MCP_HOSTNAME/api/v1/applications" \
            -H "Authorization: Bearer $TOKEN2" | jq '.items | length' 2>/dev/null)
          echo "   ‚úÖ Found $APPS2 application(s) via kgateway MCP"
        else
          echo "   ‚ùå kgateway MCP authentication failed"
        fi

  github-env-file:
    desc: "Create template .env file for GitHub MCP server"
    cmds:
      - |
        if [ -f .env.github ]; then
          echo ".env.github already exists. Backing up to .env.github.bak"
          cp .env.github .env.github.bak
        fi
        cat > .env.github << EOF
        # GitHub Personal Access Token
        # Create at: https://github.com/settings/personal-access-tokens
        # Required scopes: repo, read:org, read:user
        GITHUB_TOKEN=your_github_token_here

        # Optional: Default repository (format: owner/repo)
        # GITHUB_DEFAULT_REPO=your-org/your-repo

        # Optional: GitHub API base URL (usually not needed)
        # GITHUB_API_BASE_URL=https://api.github.com
        EOF
        echo "Created .env.github template file"
        echo "Please edit .env.github and add your GitHub token"

  generate-vscode-config:
    desc: "Generate VSCode MCP configuration for ArgoCD"
    vars:
      ARGOCD_SERVER:
        sh: task argocd:get-server-internal
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - mkdir -p .vscode
      - |
        cat > .vscode/mcp.json << EOF
        {
          "servers": {
            "argocd-mcp": {
              "type": "stdio",
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER}}",
                "ARGOCD_API_TOKEN": "{{.ARGOCD_TOKEN}}"
              }
            }
          }
        }
        EOF
      - echo "Created .vscode/mcp.json for ArgoCD MCP"

  generate-claude-config:
    desc: "Generate Claude Desktop MCP configuration for ArgoCD"
    vars:
      ARGOCD_SERVER:
        sh: task argocd:get-server-internal
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - |
        cat > claude_desktop_config.json << EOF
        {
          "mcpServers": {
            "argocd-mcp": {
              "command": "npx",
              "args": ["argocd-mcp@latest", "stdio"],
              "env": {
                "ARGOCD_BASE_URL": "{{.ARGOCD_SERVER}}",
                "ARGOCD_API_TOKEN": "{{.ARGOCD_TOKEN}}"
              }
            }
          }
        }
        EOF
        echo "Created claude_desktop_config.json for ArgoCD MCP"
