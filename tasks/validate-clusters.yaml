version: "3"

tasks:
  all:
    desc: "Validate all clusters meet acceptance criteria"
    cmds:
      - task: kustomize-build
      - task: bootstrap
      - task: control-plane
      - task: workload-clusters
      - task: architecture
      - echo "‚úÖ All clusters validation passed"

  kustomize-build:
    desc: "Validate all kustomize builds work correctly"
    cmds:
      - echo "üî® Validating kustomize builds..."
      - task: kustomize-build-overlays
      - task: kustomize-build-base
      - echo "‚úÖ All kustomize builds successful"

  kustomize-build-overlays:
    desc: "Validate namespace overlays"
    cmds:
      - echo "üìÅ Validating namespace overlays..."
      - |
        for overlay in kind control-plane apps-dev; do
          echo "  üîç Building kubernetes/namespaces/overlays/$overlay..."
          if kustomize build kubernetes/namespaces/overlays/$overlay >/dev/null 2>&1; then
            echo "  ‚úÖ kubernetes/namespaces/overlays/$overlay - OK"
          else
            echo "  ‚ùå kubernetes/namespaces/overlays/$overlay - FAILED"
            echo "  Error output:"
            kustomize build kubernetes/namespaces/overlays/$overlay 2>&1 | sed 's/^/    /'
            exit 1
          fi
        done

  kustomize-build-base:
    desc: "Validate base namespace components"
    cmds:
      - echo "üìÅ Validating base namespace components..."
      - |
        for base in crossplane-system flux-system gkecluster-control-plane gkecluster-apps-dev kagent kagent-system kgateway-system; do
          if [ -f "kubernetes/namespaces/base/$base/kustomization.yaml" ]; then
            echo "  üîç Building kubernetes/namespaces/base/$base..."
            if kustomize build kubernetes/namespaces/base/$base >/dev/null 2>&1; then
              echo "  ‚úÖ kubernetes/namespaces/base/$base - OK"
            else
              echo "  ‚ùå kubernetes/namespaces/base/$base - FAILED"
              echo "  Error output:"
              kustomize build kubernetes/namespaces/base/$base 2>&1 | sed 's/^/    /'
              exit 1
            fi
          else
            echo "  ‚è≠Ô∏è  kubernetes/namespaces/base/$base - No kustomization.yaml (skipping)"
          fi
        done

  bootstrap:
    desc: "Validate bootstrap cluster (kind)"
    vars:
      CONTEXT: kind-kind-test-cluster
    silent: true
    cmds:
      - echo "üîç Validating bootstrap cluster ({{.CONTEXT}})..."
      - |
        # Check Flux is ready
        echo "üì¶ Flux Components:"
        kubectl --context={{.CONTEXT}} get kustomizations,gitrepositories,helmreleases -A --no-headers | \
        awk '{printf "%-15s %-30s %-15s %s\n", $1, $2"."$3, $4, $5}' | sort
        
        # Check composite resources exist and are ready
        echo -e "\nüèóÔ∏è  Composite Resources:"
        kubectl --context={{.CONTEXT}} get composite --no-headers | \
        awk '{printf "%-30s %-15s %s\n", $1, $2, $3}'
        
        # Verify workload clusters are NOT managed from bootstrap
        echo -e "\nüö´ Workload cluster composites (should be empty):"
        kubectl --context={{.CONTEXT}} get composite --no-headers | grep -v control-plane || echo "None (correct)"

  control-plane:
    desc: "Validate control-plane cluster"
    vars:
      CONTEXT: gke_{{.PROJECT_ID}}_{{.ZONE}}_control-plane
      ZONE: '{{default "australia-southeast1-a" .ZONE}}'
    silent: true
    cmds:
      - echo "üîç Validating control-plane cluster ({{.CONTEXT}})..."
      - |
        # Check Crossplane is installed and providers are ready
        echo "‚öôÔ∏è  Crossplane Providers:"
        kubectl --context={{.CONTEXT}} get providers.pkg.crossplane.io --no-headers | \
        awk '{printf "%-30s %-15s %-10s %s\n", $1, $2, $3, $4}'
        
        # Check Flux is ready
        echo -e "\nüì¶ Flux Components:"
        kubectl --context={{.CONTEXT}} get kustomizations,gitrepositories -A --no-headers | \
        awk '{printf "%-15s %-30s %-15s %s\n", $1, $2"."$3, $4, $5}' | sort
        
        # Check workload cluster composites are managed from here
        echo -e "\nüèóÔ∏è  Workload Cluster Composites:"
        kubectl --context={{.CONTEXT}} get composite --no-headers | \
        awk '{printf "%-30s %-15s %s\n", $1, $2, $3}'
        
        # Verify control-plane does NOT have workload apps
        echo -e "\nüö´ Platform tenants (should be minimal):"
        kubectl --context={{.CONTEXT}} get namespaces | grep -E "(tenant|app)" || echo "None (correct)"

  workload-clusters:
    desc: "Validate workload clusters (apps-dev)"
    vars:
      CONTEXT: gke_{{.PROJECT_ID}}_{{.ZONE}}_apps-dev
      ZONE: '{{default "australia-southeast1-a" .ZONE}}'
    silent: true
    cmds:
      - echo "üîç Validating workload cluster apps-dev ({{.CONTEXT}})..."
      - |
        # Check if cluster is accessible
        if ! kubectl --context={{.CONTEXT}} get nodes --timeout=10s >/dev/null 2>&1; then
          echo "‚ùå FAIL: Cluster {{.CONTEXT}} not accessible or not provisioned"
          exit 1
        fi
        
        # Verify Crossplane is NOT installed
        echo "üö´ Crossplane (should not exist):"
        if kubectl --context={{.CONTEXT}} get namespaces | grep crossplane >/dev/null 2>&1; then
          echo "‚ùå FAIL: Crossplane found in workload cluster"
          exit 1
        else
          echo "‚úÖ None (correct)"
        fi
        
        # Verify no composite resources
        echo -e "\nüö´ Composite Resources (should not exist):"
        if kubectl --context={{.CONTEXT}} get composite >/dev/null 2>&1; then
          echo "‚ùå FAIL: Composites found in workload cluster"
          exit 1
        else
          echo "‚úÖ None (correct)"
        fi
        
        # Check Flux is ready (for app deployments)
        echo -e "\nüì¶ Flux Components:"
        kubectl --context={{.CONTEXT}} get kustomizations,gitrepositories -A --no-headers | \
        awk '{printf "%-15s %-30s %-15s %s\n", $1, $2"."$3, $4, $5}' | sort
        
        # Show tenant applications
        echo -e "\nüöÄ Applications/Tenants:"
        kubectl --context={{.CONTEXT}} get deployments,statefulsets -A --no-headers | \
        awk '{printf "%-15s %-30s %-10s %s\n", $1, $2"."$3, $4, $5}' | head -10

  architecture:
    desc: "Validate architectural constraints"
    vars:
      ZONE: '{{default "australia-southeast1-a" .ZONE}}'
    cmds:
      - echo "üèõÔ∏è  Validating architectural constraints..."
      - |
        echo "1. Bootstrap cluster manages control-plane provisioning:"
        kubectl --context=kind-kind-test-cluster get composite | grep control-plane && echo "‚úÖ PASS" || echo "‚ùå FAIL"
        
        echo -e "\n2. Control-plane manages workload cluster provisioning:"
        kubectl --context=gke_{{.PROJECT_ID}}_{{.ZONE}}_control-plane get composite | grep -E "(apps-dev|workload)" && echo "‚úÖ PASS" || echo "‚ùå FAIL"
        
        echo -e "\n3. Workload clusters have no infrastructure management:"
        if kubectl --context=gke_{{.PROJECT_ID}}_{{.ZONE}}_apps-dev get nodes --timeout=10s >/dev/null 2>&1; then
          if kubectl --context=gke_{{.PROJECT_ID}}_{{.ZONE}}_apps-dev get namespaces | grep crossplane >/dev/null 2>&1; then
            echo "‚ùå FAIL: Crossplane found in workload cluster"
            exit 1
          else
            echo "‚úÖ PASS: No Crossplane in workload cluster"
          fi
        else
          echo "‚ùå FAIL: Apps-dev cluster not accessible or not provisioned"
          exit 1
        fi
        
        echo -e "\n4. All composites are in Ready state:"
        BOOTSTRAP_FAILED=$(kubectl --context=kind-kind-test-cluster get composite --no-headers | grep -v "True" | wc -l | tr -d ' ')
        CONTROL_FAILED=$(kubectl --context=gke_{{.PROJECT_ID}}_{{.ZONE}}_control-plane get composite --no-headers 2>/dev/null | grep -v "True" | wc -l | tr -d ' ')
        TOTAL_FAILED=$((BOOTSTRAP_FAILED + CONTROL_FAILED))
        if [ "$TOTAL_FAILED" -eq 0 ]; then
          echo "‚úÖ PASS: All composites ready"
        else
          echo "‚ùå FAIL: $TOTAL_FAILED composites not ready"
          exit 1
        fi

  pr-acceptance-criteria:
    desc: "Display PR acceptance criteria"
    cmds:
      - |
        cat << 'EOF'
        ## PR Acceptance Criteria
        
        ### Infrastructure Validation
        - [ ] All kustomize builds complete successfully without errors
        - [ ] Bootstrap cluster (kind) manages control-plane cluster provisioning only
        - [ ] Control-plane cluster manages workload cluster provisioning
        - [ ] All Crossplane composite resources are in Ready state
        - [ ] All Flux components are reconciled successfully
        
        ### Architecture Constraints
        - [ ] Workload clusters do NOT have Crossplane installed
        - [ ] Workload clusters do NOT manage infrastructure composites
        - [ ] Control-plane cluster does NOT run tenant applications
        - [ ] Bootstrap cluster does NOT manage workload clusters directly
        
        ### Validation Commands
        ```bash
        # Run full validation (includes kustomize builds)
        task validate:all
        
        # Validate kustomize builds only
        task validate:kustomize-build
        
        # Check specific clusters
        task validate:bootstrap
        task validate:control-plane
        task validate:workload-clusters
        
        # Verify architectural constraints
        task validate:architecture
        ```
        
        ### Expected Success Criteria
        - All tasks complete without errors
        - All composite resources show "True" in Ready column
        - All Flux kustomizations show "Applied" status
        - No Crossplane components in workload clusters
        - Workload cluster composites only exist in control-plane
        EOF
