version: "3"

env:
  # These variables must be set in your shell environment before running tasks.
  # Example:
  # export ARGOCD_STD_HOSTNAME="argocd.gcp.yourdomain.com"
  # export ARGOCD_MCP_HOSTNAME="argo-mcp.gcp.yourdomain.com"
  # The tasks will fail if these are not set.
  ARGOCD_STD_HOSTNAME:
    sh: |
      if [ -z "$ARGOCD_STD_HOSTNAME" ]; then
        echo "Error: Environment variable ARGOCD_STD_HOSTNAME is not set." >&2
        echo "Please set it to your ArgoCD standard UI hostname, e.g., export ARGOCD_STD_HOSTNAME=\"argocd.gcp.example.com\"" >&2
        exit 1
      fi
      echo "$ARGOCD_STD_HOSTNAME"
  ARGOCD_MCP_HOSTNAME:
    sh: |
      if [ -z "$ARGOCD_MCP_HOSTNAME" ]; then
        echo "Error: Environment variable ARGOCD_MCP_HOSTNAME is not set." >&2
        echo "Please set it to your ArgoCD MCP UI hostname, e.g., export ARGOCD_MCP_HOSTNAME=\"argo-mcp.gcp.example.com\"" >&2
        exit 1
      fi
      echo "$ARGOCD_MCP_HOSTNAME"

tasks:
  get-secret:
    desc: "Get Argo CD initial admin password, in current context"
    cmds:
      - kubectx -c > /dev/null 2>&1
      - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

  check-gateway-status:
    desc: "Check ArgoCD Gateway deployment status"
    cmds:
      - echo "=== Standard ArgoCD Gateway Status ==="
      - kubectl get gateway argocd-gateway -n argocd -o wide || echo "Standard Gateway not found"
      - echo ""
      - echo "=== kgateway Status ==="
      - kubectl get gateway shared-mcp-kgateway -n kgateway-system -o wide || echo "kgateway not found"
      - echo ""
      - echo "=== ArgoCD MCP XListenerSet Status ==="
      - kubectl get xlistenerset argocd-mcp-listener-set -n mcp -o wide || echo "XListenerSet not found"
      - echo ""
      - echo "=== HTTPRoute Status ==="
      - kubectl get httproute -n argocd,mcp -o wide || echo "HTTPRoutes not found"
      - echo ""
      - echo "=== Gateway IP Addresses ==="
      - echo "Standard Gateway IP:"
      - kubectl get gateway argocd-gateway -n argocd -o jsonpath='{.status.addresses[0].value}' 2>/dev/null || echo "IP not ready"

  test-gateway-connectivity:
    desc: "Test ArgoCD Gateway connectivity"
    cmds:
      - |
        echo "Testing ArgoCD Gateway connectivity..."

        echo "1. Testing Standard ArgoCD (Web UI):"
        curl -I "https://$ARGOCD_STD_HOSTNAME/" || echo "Standard ArgoCD test failed"

        echo ""
        echo "2. Testing ArgoCD MCP API:"
        curl -I "https://$ARGOCD_MCP_HOSTNAME/" || echo "MCP API test failed"

        echo ""
        echo "3. Testing ArgoCD API endpoints:"
        curl -k -I "https://$ARGOCD_STD_HOSTNAME/api/v1/session" || echo "Standard API test failed"
        curl -k -I "https://$ARGOCD_MCP_HOSTNAME/api/v1/session" || echo "MCP API test failed"

  cleanup-gateway:
    desc: "Remove ArgoCD Gateway manifests"
    cmds:
      - kubectl delete -f argocd-gateway-manifests.yaml || echo "Some resources may not exist"
      - echo "âœ… Cleaned up ArgoCD Gateway manifests"

  debug-service:
    desc: "Debug ArgoCD service configuration"
    cmds:
      - kubectx -c > /dev/null 2>&1
      - |
        echo "ArgoCD Service Debug Information:"
        echo "================================"
        echo "Service Type: $(kubectl -n argocd get svc argocd-server -o jsonpath='{.spec.type}')"
        echo "Cluster IP: $(kubectl -n argocd get svc argocd-server -o jsonpath='{.spec.clusterIP}')"
        echo "HTTPS Port: $(kubectl -n argocd get svc argocd-server -o jsonpath='{.spec.ports[?(@.name=="https")].port}')"

        SERVICE_TYPE=$(kubectl -n argocd get svc argocd-server -o jsonpath='{.spec.type}')
        if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
          echo "LoadBalancer IP: $(kubectl -n argocd get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
        elif [ "$SERVICE_TYPE" = "NodePort" ]; then
          echo "NodePort: $(kubectl -n argocd get svc argocd-server -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')"
        fi

        echo ""
        echo "MCP Gateway URL (example): https://$ARGOCD_MCP_HOSTNAME/"

  get-token:
    desc: "Get ArgoCD token"
    vars:
      ARGOCD_SERVER_URL: "https://{{.ARGOCD_STD_HOSTNAME}}"
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret
    cmds:
      - |
        echo "Using server: {{.ARGOCD_SERVER_URL}}" >&2
        echo "Using password: {{.ARGOCD_PASSWORD}}" >&2
        curl -k -s "{{.ARGOCD_SERVER_URL}}/api/v1/session" \
          -d '{"username":"admin","password":"{{.ARGOCD_PASSWORD}}"}' \
          -H "Content-Type: application/json" | \
          jq -r '.token' 2>/dev/null || echo "Failed to get token"

  get-config:
    desc: "Get complete ArgoCD configuration"
    vars:
      ARGOCD_PASSWORD:
        sh: task argocd:get-secret
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - |
        echo "Server URL: https://{{.ARGOCD_STD_HOSTNAME}}"
        echo "Username: admin"
        echo "Password: {{.ARGOCD_PASSWORD}}"
        echo "API Token: {{.ARGOCD_TOKEN}}"

  test-api:
    desc: "Test ArgoCD API connectivity"
    vars:
      ARGOCD_SERVER_URL: "https://{{.ARGOCD_STD_HOSTNAME}}"
      ARGOCD_TOKEN:
        sh: task argocd:get-token
    cmds:
      - |
        echo "Testing ArgoCD API connectivity..."
        curl -k -s "{{.ARGOCD_SERVER_URL}}/api/v1/applications" \
          -H "Authorization: Bearer {{.ARGOCD_TOKEN}}" \
          -H "Content-Type: application/json" | \
          jq '.items | length' && echo "applications found" || echo "API test failed"
