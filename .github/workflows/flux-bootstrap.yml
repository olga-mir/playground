name: Flux Bootstrap GKE Clusters

# Requires repository secret: PROJECT_ID (GCP Project ID)
run-name: "Flux Bootstrap: ${{ github.event.client_payload.metadata.cluster || 'Unknown Cluster' }} üöÄ"

on:
  repository_dispatch:
    types:
      - Kustomization/clusters.flux-system

concurrency:
  group: fluxcd-bootstrap-${{ github.event.client_payload.metadata.cluster }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  bootstrap-flux:
    name: Bootstrap Flux on GKE Cluster
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract cluster info from payload and set project from secret
      id: cluster-info
      env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
      run: |
        LOCATION="${{ github.event.client_payload.metadata.location }}"
        CLUSTER="${{ github.event.client_payload.metadata.cluster }}"

        # Mask sensitive information FIRST before any output
        echo "::add-mask::${PROJECT_ID}"

        # Print the event message from the payload
        echo "üì® Event message: ${{ github.event.client_payload.message || 'No message in payload' }}"

        echo "projectID=${PROJECT_ID}" >> $GITHUB_OUTPUT
        echo "cluster=${CLUSTER}" >> $GITHUB_OUTPUT
        echo "location=${LOCATION}" >> $GITHUB_OUTPUT
        echo "should_proceed=true" >> $GITHUB_OUTPUT

    - name: Setup Flux CLI
      if: steps.cluster-info.outputs.should_proceed == 'true'
      uses: fluxcd/flux2/action@main

    - name: Authenticate to Google Cloud
      if: steps.cluster-info.outputs.should_proceed == 'true'
      id: auth
      uses: google-github-actions/auth@v2
      with:
        token_format: access_token
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Wait for cluster provisioning and readiness
      if: steps.cluster-info.outputs.should_proceed == 'true'
      env:
        PROJECT_ID: ${{ steps.cluster-info.outputs.projectID }}
      run: |

        IMMEDIATE="${{ github.event.client_payload.metadata.immediate }}"
        if [ "$IMMEDIATE" = "true" ]; then
          echo "üöÄ Immediate mode enabled - skipping initial wait"
        else
          echo "üïí Waiting 7 minutes for cluster ${{ steps.cluster-info.outputs.cluster }} to be provisioned..."
          # Initial 7-minute wait for cluster provisioning
          sleep 420
        fi

        echo "‚è≥ Now polling for cluster readiness (max 15 minutes at 30s intervals)..."

        # Poll for cluster existence (max 15 minutes)
        timeout_seconds=900
        elapsed=0

        while [ $elapsed -lt $timeout_seconds ]; do
          if gcloud container clusters describe "${{ steps.cluster-info.outputs.cluster }}" \
              --location="${{ steps.cluster-info.outputs.location }}" \
              --project="${{ steps.cluster-info.outputs.projectID }}" >/dev/null 2>&1; then
            echo "‚úÖ Cluster exists and is accessible"
            break
          else
            echo "‚è∏Ô∏è  Cluster not yet available, waiting 30 seconds... (elapsed: ${elapsed}s)"
            sleep 30
            elapsed=$((elapsed + 30))
          fi
        done

        if [ $elapsed -ge $timeout_seconds ]; then
          echo "Timeout waiting for cluster to exist"
          echo "Listing all clusters in project and location for debugging:"
          gcloud container clusters list --project="${{ steps.cluster-info.outputs.projectID }}" || true
          exit 1
        fi

    - name: Get GKE credentials
      if: steps.cluster-info.outputs.should_proceed == 'true'
      id: get-credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ steps.cluster-info.outputs.cluster}}
        location: ${{ steps.cluster-info.outputs.location }}

    - name: Wait for cluster to be ready
      if: steps.cluster-info.outputs.should_proceed == 'true'
      id: cluster-ready
      run: |
        echo "Checking if cluster is ready..."

        # Wait for cluster to be accessible (max 10 minutes)
        timeout_seconds=600
        elapsed=0

        while [ $elapsed -lt $timeout_seconds ]; do
          if kubectl cluster-info >/dev/null 2>&1; then
            echo "Cluster is accessible via kubectl"

            # Wait for essential system pods to be ready
            echo "Waiting for kube-system pods to be ready..."
            if kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=300s; then
              echo "Cluster is ready for Flux bootstrap"
              echo "cluster_ready=true" >> $GITHUB_OUTPUT
              break
            else
              echo "Some kube-system pods are not ready yet"
            fi
          else
            echo "Cluster not yet accessible, waiting..."
          fi

          sleep 30
          elapsed=$((elapsed + 30))
        done

        if [ $elapsed -ge $timeout_seconds ]; then
          echo "Timeout waiting for cluster to be ready"
          echo "cluster_ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Create cluster config
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        # Create the namespace if it doesn't already exist
        kubectl get namespace flux-system >/dev/null 2>&1 || kubectl create namespace flux-system
        # Always create or update the ConfigMap
        kubectl create configmap platform-config -n flux-system \
          --from-literal=ZONE="${{ steps.cluster-info.outputs.location }}" \
          --from-literal=CLUSTER_NAME="${{ steps.cluster-info.outputs.cluster }}" \
          --from-literal=PROJECT_ID="${{ steps.cluster-info.outputs.projectID }}" \
          --from-literal=REPO_OWNER="${{ github.repository_owner }}" \
          --from-literal=REPO_NAME="${{ github.event.repository.name }}" \
          --dry-run=client -o yaml | kubectl apply -f -


    - name: Run Flux pre-installation checks
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        flux check --pre

    - name: Bootstrap Flux
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      id: bootstrap
      env:
        GITHUB_TOKEN: ${{ secrets.FLUX_GITHUB_TOKEN }}
      run: |
        CLUSTER_NAME="${{ steps.cluster-info.outputs.cluster }}"

        flux bootstrap github \
          --owner="${{ github.repository_owner }}" \
          --repository="${{ github.event.repository.name }}" \
          --branch="develop" \
          --path="./kubernetes/clusters/${CLUSTER_NAME}" \
          --personal \
          --network-policy=true \
          --components-extra=image-reflector-controller,image-automation-controller \
          --timeout=10m0s

    - name: Run Flux installation checks
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        flux check
        echo "Flux bootstrap completed for cluster: ${{ steps.cluster-info.outputs.cluster }}"

    - name: Wait for Flux reconciliation and trigger stalled kustomizations
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        echo "üïí Waiting 2 minutes for initial Flux reconciliation..."
        sleep 120

        echo "üìã Checking Flux kustomizations status:"
        flux get all -A

        echo ""
        echo "üîÑ Triggering reconciliation for any non-Ready kustomizations..."

        # Get list of kustomizations that are not Ready (excluding those with empty READY column)
        NOT_READY=$(kubectl get kustomizations.kustomize.toolkit.fluxcd.io -A --no-headers | \
          awk '$6 != "True" && $6 != "" {print $1":"$2}' | grep -v '^$' || true)

        if [ -n "$NOT_READY" ]; then
          echo "Found non-Ready kustomizations, triggering reconciliation:"
          echo "$NOT_READY" | while IFS=':' read -r namespace name; do
            echo "  üîÑ Reconciling kustomization $name in namespace $namespace"
            flux reconcile kustomization "$name" -n "$namespace" --timeout=3s || echo "    ‚ö†Ô∏è Failed to reconcile $name"
          done
        else
          echo "‚úÖ All kustomizations are Ready, no action needed"
        fi

        echo ""
        echo "üïí Waiting 30 seconds for reconciliation to complete..."
        sleep 30

        echo "üìã Final Flux status after reconciliation:"
        flux get all -A
