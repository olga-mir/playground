name: Flux Bootstrap GKE Clusters

run-name: "Flux Bootstrap: ${{ github.event.client_payload.metadata.cluster || 'Unknown Cluster' }} ðŸš€"

on:
  repository_dispatch:
    types: [Kustomization/control-plane-cluster.flux-system]

concurrency:
  group: fluxcd-bootstrap-${{ github.event.client_payload.metadata.cluster }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  bootstrap-flux:
    name: Bootstrap Flux on GKE Cluster
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract cluster info from payload
      id: cluster-info
      run: |
        echo "projectID=${{ github.event.client_payload.metadata.project }}" >> $GITHUB_OUTPUT
        echo "cluster=${{ github.event.client_payload.metadata.cluster }}" >> $GITHUB_OUTPUT
        echo "location=${{ github.event.client_payload.metadata.location }}" >> $GITHUB_OUTPUT
        echo "should_proceed=true" >> $GITHUB_OUTPUT

    - name: Setup Flux CLI
      if: steps.cluster-info.outputs.should_proceed == 'true'
      uses: fluxcd/flux2/action@main

    - name: Authenticate to Google Cloud
      if: steps.cluster-info.outputs.should_proceed == 'true'
      id: auth
      uses: google-github-actions/auth@v2
      with:
        token_format: access_token
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Get GKE credentials
      if: steps.cluster-info.outputs.should_proceed == 'true'
      id: get-credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ steps.cluster-info.outputs.cluster}}
        location: ${{ steps.cluster-info.outputs.location }}

    - name: Wait for cluster to be ready
      if: steps.cluster-info.outputs.should_proceed == 'true'
      id: cluster-ready
      run: |
        echo "Checking if cluster is ready..."

        # Wait for cluster to be accessible (max 10 minutes)
        timeout_seconds=600
        elapsed=0

        while [ $elapsed -lt $timeout_seconds ]; do
          if kubectl cluster-info >/dev/null 2>&1; then
            echo "Cluster is accessible via kubectl"

            # Wait for essential system pods to be ready
            echo "Waiting for kube-system pods to be ready..."
            if kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=300s; then
              echo "Cluster is ready for Flux bootstrap"
              echo "cluster_ready=true" >> $GITHUB_OUTPUT
              break
            else
              echo "Some kube-system pods are not ready yet"
            fi
          else
            echo "Cluster not yet accessible, waiting..."
          fi

          sleep 30
          elapsed=$((elapsed + 30))
        done

        if [ $elapsed -ge $timeout_seconds ]; then
          echo "Timeout waiting for cluster to be ready"
          echo "cluster_ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Create cluster config
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        # Create the namespace if it doesn't already exist
        kubectl get namespace flux-system >/dev/null 2>&1 || kubectl create namespace flux-system
        # Always create or update the ConfigMap
        kubectl create configmap cluster-config -n flux-system \
          --from-literal=ZONE="${{ steps.cluster-info.outputs.location }}" \
          --from-literal=CLUSTER_NAME="${{ steps.cluster-info.outputs.cluster_name }}" \
          --from-literal=CLUSTER_TYPE="${{ steps.cluster-info.outputs.cluster_type }}" \
          --from-literal=REPO_OWNER="${{ github.repository_owner }}" \
          --from-literal=REPO_NAME="${{ github.event.repository.name }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    # will cross this bridge when we get there, def no API keys in GH secrets
    # - name: Setup application secrets (control-plane cluster only)
    #   if: steps.cluster-info.outputs.cluster_type == 'control-plane'
    #   run: |
    #     # Create kagent-system namespace
    #     kubectl get namespace kagent-system >/dev/null 2>&1 || kubectl create namespace kagent-system

    #     # Create AI API secrets
    #     kubectl create secret generic kagent-anthropic -n kagent-system \
    #       --from-literal=ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
    #       --dry-run=client -o yaml | kubectl apply -f -

    #     kubectl create secret generic kagent-openai -n kagent-system \
    #       --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
    #       --dry-run=client -o yaml | kubectl apply -f -

    - name: Run Flux pre-installation checks
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        flux check --pre

    - name: Bootstrap Flux
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      id: bootstrap
      env:
        GITHUB_TOKEN: ${{ secrets.FLUX_GITHUB_TOKEN }}
      run: |
        CLUSTER_TYPE="${{ steps.cluster-info.outputs.cluster_type }}"

        flux bootstrap github \
          --owner="${{ github.repository_owner }}" \
          --repository="${{ github.event.repository.name }}" \
          --branch="${{ github.ref_name }}" \
          --path="./clusters/${CLUSTER_TYPE}" \
          --token-auth \
          --network-policy=true \
          --components-extra=image-reflector-controller,image-automation-controller \
          --timeout=10m0s

    - name: Run Flux installation checks
      if: steps.cluster-info.outputs.should_proceed == 'true' && steps.cluster-ready.outputs.cluster_ready == 'true'
      run: |
        flux check
        echo "Flux bootstrap completed for cluster: ${{ steps.cluster-info.outputs.cluster_name }}"
