name: Crossplane Consumer Validation

on:
  push:
    branches:
      - main
      - 'releases/**'

jobs:
  validate-crossplane-consumers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Detect and validate changed consumer files
        run: |
          echo "## üîç Detecting Changes"

          # Get changed files compared to previous commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Find consumer files (composite resources and tenant configs)
          CONSUMER_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(yaml|yml)$' | grep -E '(bootstrap/control-plane/crossplane/|platform-tenants/)' || true)

          if [[ -z "$CONSUMER_FILES" ]]; then
            echo "‚è≠Ô∏è  No Crossplane consumer files changed. Skipping validation."
            exit 0
          fi

          echo ""
          echo "## üìã Consumer files to validate:"
          echo "$CONSUMER_FILES"
          echo ""

          echo "## ‚úÖ Validating Files"
          ERROR_COUNT=0

          for file in $CONSUMER_FILES; do
            if [[ ! -f "$file" ]]; then
              echo "‚ö†Ô∏è  Skipping deleted file: $file"
              continue
            fi

            echo "Validating: $file"

            # YAML syntax validation
            if ! yq eval '.' "$file" >/dev/null 2>&1; then
              echo "‚ùå YAML syntax error in $file"
              ((ERROR_COUNT++))
              continue
            fi

            # Basic structure validation for YAML files
            if ! yq eval '.apiVersion and .kind and .metadata.name' "$file" | grep -q "true"; then
              echo "‚ùå $file missing required fields (apiVersion, kind, metadata.name)"
              ((ERROR_COUNT++))
              continue
            fi

            echo "‚úÖ $file validated successfully"
          done

          echo ""
          if [[ $ERROR_COUNT -eq 0 ]]; then
            echo "## üéâ All consumer files validated successfully!"
          else
            echo "## ‚ùå Validation failed with $ERROR_COUNT errors"
            exit 1
          fi
