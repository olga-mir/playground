apiVersion: kagent.dev/v1alpha1
kind: Agent
metadata:
  name: crossplane-monitor
  namespace: kagent
spec:
  model:
    provider: "anthropic"
    name: "claude-3-5-sonnet-20241022"
  systemPrompt: |
    You are an autonomous monitoring agent for Crossplane compositions in the olga-mir/playground repository.

    Run this monitoring loop every 5 minutes:
    1. Check all ArgoCD applications for sync failures
    2. For any failures involving Crossplane resources:
       - Gather logs from crossplane-system namespace
       - Check XR (Composite Resource) status
       - Analyze composition errors
       - If you can identify the fix, create a GitHub branch and PR
       - Add detailed comments explaining the issue and fix
    3. Monitor existing PRs for merge status
    4. Update failed resources after PR merges

    Focus on these repository patterns:
    - teams/*/xr-*.yaml (XRs, e.g., landing-zone-xr.yaml)
    - platform/config/applications/*crossplane* (compositions)

    When creating fixes:
    - Use descriptive branch names like "fix/crossplane-team-alpha-schema-error"
    - Include error logs in PR description
    - Tag relevant team members if appropriate
    - Test the fix logic before committing
  schedule: "*/5 * * * *"  # Every 5 minutes
  tools:
  - name: get-resources
  - name: get-logs
  - name: argo-app-status
  - name: crossplane-debug
  - name: github-mcp
  - name: prometheus-query

---
# Workflow orchestration agent
apiVersion: kagent.dev/v1alpha1
kind: Agent
metadata:
  name: crossplane-workflow-orchestrator
  namespace: kagent
spec:
  model:
    provider: "anthropic"
    name: "claude-3-5-sonnet-20241022"
  systemPrompt: |
    You orchestrate the autonomous Crossplane debugging workflow by coordinating multiple agents:

    Workflow Steps:
    1. Monitor agent detects ArgoCD sync failures
    2. Debug agent analyzes the specific Crossplane errors
    3. Fix agent generates and applies solutions
    4. Validation agent confirms fixes work

    Coordinate these agents and maintain context across the entire debugging cycle.
    Escalate to human intervention only when:
    - Multiple fix attempts fail
    - Breaking changes are detected
    - Security-related configurations need changes
  tools:
  - name: agent-coordinator
  - name: github-mcp
  - name: get-logs

---
# GitHub Integration Tool for autonomous PRs
apiVersion: kagent.dev/v1alpha1
kind: ToolServers
metadata:
  name: github-auto-pr
  namespace: kagent
spec:
  description: "Create autonomous GitHub PRs for Crossplane fixes"
  function:
    name: "create_crossplane_fix_pr"
    description: "Create a PR with Crossplane composition fixes"
    parameters:
      type: object
      properties:
        issue_description:
          type: string
          description: "Description of the Crossplane issue"
        fix_files:
          type: array
          description: "Files to be modified with their new content"
        error_logs:
          type: string
          description: "Error logs to include in PR description"
    implementation: |
      # This would integrate with your GitHub MCP
      # to create branches, commit fixes, and create PRs
      echo "Creating autonomous PR for Crossplane fix..."
      # Implementation details would use the GitHub MCP tools
      # that you already have connected
